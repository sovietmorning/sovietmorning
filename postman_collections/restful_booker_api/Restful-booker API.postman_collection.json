{
	"info": {
		"_postman_id": "0daa833a-e864-4e60-b815-60b338e6a117",
		"name": "Restful-booker API",
		"description": "Коллекция разработана для тестирования публичного API [Restful-booker API](https://restful-booker.herokuapp.com/apidoc/)\n\n- Для корректной работы коллекции необходимо подключить окружение \"Restful-booker env\"\n    \n\n---\n\nThis collection was developed for testing the public API [restful-booker API](https://restful-booker.herokuapp.com/apidoc/index.html)\n\n- Required: Configure \"Restful-booker env\"",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39553756",
		"_collection_link": "https://test-public-apis.postman.co/workspace/LEARNING~dcbfabfb-ad2c-4409-bb69-fa175c0cfc4c/collection/39553756-0daa833a-e864-4e60-b815-60b338e6a117?action=share&source=collection_link&creator=39553756"
	},
	"item": [
		{
			"name": "Schema Setup",
			"item": [
				{
					"name": "Setup Schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let TokenSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"token\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let BadCredentials = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"reason\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"reason\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let CreatedBooking = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"bookingid\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"booking\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"firstname\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"lastname\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"totalprice\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"depositpaid\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"bookingdates\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"checkin\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"checkout\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"checkin\",\r",
									"                        \"checkout\"\r",
									"                    ]\r",
									"                },\r",
									"                \"additionalneeds\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"firstname\",\r",
									"                \"lastname\",\r",
									"                \"totalprice\",\r",
									"                \"depositpaid\",\r",
									"                \"bookingdates\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"bookingid\",\r",
									"        \"booking\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let ExistingBooking = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"totalprice\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"depositpaid\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"bookingdates\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"checkin\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"checkout\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"checkin\",\r",
									"        \"checkout\"\r",
									"      ]\r",
									"    },\r",
									"    \"additionalneeds\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstname\",\r",
									"    \"lastname\",\r",
									"    \"totalprice\",\r",
									"    \"depositpaid\",\r",
									"    \"bookingdates\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let BookingIds = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"bookingid\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"bookingid\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.environment.set(\"TokenSchema\", JSON.stringify(TokenSchema));\r",
									"pm.environment.set(\"BadCredentials\", JSON.stringify(BadCredentials));\r",
									"pm.environment.set(\"CreatedBooking\", JSON.stringify(CreatedBooking));\r",
									"pm.environment.set(\"ExistingBooking\", JSON.stringify(ExistingBooking));\r",
									"pm.environment.set(\"BookingIds\", JSON.stringify(BookingIds));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "CreateTokenValidData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseToken = pm.response.json().token;\r",
									"pm.environment.set(\"token\", responseToken);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let TokenSchema = JSON.parse(pm.environment.get(\"TokenSchema\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(TokenSchema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenInvUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{$randomFirstName}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenInvPW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenWithoutUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenWithoutPW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenEmptyUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenEmptyPW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenUsernameInvData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : 2025.07.25,\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenPasswordInvData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : hello\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenNoBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenValidData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenLongInvData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"The moon rose slowly over the dark forest casting silver glimmers on the overgrown path the wind whispered through ancient oak leaves as if warning travelers of danger an owl hooted in the distance echoing through the trees suddenly bushes rustled perhaps a fox or badger beginning its nightly hunt the abandoned house at the village edge stood long deserted but tonight a flickering light appeared in its windows locals avoided this place telling ghost stories yet brave souls who approached could see torn dusty wallpaper broken furniture and scattered book pages torn in rage scientists still debate crop circles some blame humans others believe in extraterrestrial origins each new formation sparks heated discussions one recent case revealed a strange metallic object emitting faint glow within the circle oceans hide countless mysteries legends speak of an ancient city among coral reefs built by unknown civilization divers exploring the area described strange structures covered in cryptic symbols equipment sometimes vanished there while cameras captured unexplainable interference artificial intelligence advances at incredible speed neural networks now write poems compose music and hold coherent conversations yet many fear machines may one day surpass human intellect secret labs develop self-learning algorithms requiring no programmer input the future remains uncertain as technology evolves beyond imagination\",\r\n    \"password\" : \"The moon rose slowly over the dark forest casting silver glimmers on the overgrown path the wind whispered through ancient oak leaves as if warning travelers of danger an owl hooted in the distance echoing through the trees suddenly bushes rustled perhaps a fox or badger beginning its nightly hunt the abandoned house at the village edge stood long deserted but tonight a flickering light appeared in its windows locals avoided this place telling ghost stories yet brave souls who approached could see torn dusty wallpaper broken furniture and scattered book pages torn in rage scientists still debate crop circles some blame humans others believe in extraterrestrial origins each new formation sparks heated discussions one recent case revealed a strange metallic object emitting faint glow within the circle oceans hide countless mysteries legends speak of an ancient city among coral reefs built by unknown civilization divers exploring the area described strange structures covered in cryptic symbols equipment sometimes vanished there while cameras captured unexplainable interference artificial intelligence advances at incredible speed neural networks now write poems compose music and hold coherent conversations yet many fear machines may one day surpass human intellect secret labs develop self-learning algorithms requiring no programmer input the future remains uncertain as technology evolves beyond imagination\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenDoubleData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\",\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenNonStringUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : 12345,\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "CreateTokenNonStringPW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let BadCredentials = JSON.parse(pm.environment.get(\"BadCredentials\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(BadCredentials);\r",
									"});\r",
									"\r",
									"pm.test(\"Body text is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Booking",
			"item": [
				{
					"name": "ByXML",
					"item": [
						{
							"name": "CreateBookingByXML",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{totalPrice}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlNoAdditionalNeeds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{totalPrice}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlLongNames&Needs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"console.log(jsonData);\r",
											"\r",
											"function decodeHtml(str) {\r",
											"    return str\r",
											"        .replace(/&lt;/g, '<')\r",
											"        .replace(/&gt;/g, '>')\r",
											"        .replace(/&amp;/g, '&')\r",
											"        .replace(/&quot;/g, '\"')\r",
											"        .replace(/&#39;/g, \"'\")\r",
											"        .replace(/&apos;/g, \"'\");\r",
											"};\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let longTextSymbols = decodeHtml(pm.environment.get(\"longText&Symbols\"));\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(longTextSymbols);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(longTextSymbols);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(longTextSymbols);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{longText&Symbols}}</firstname>\r\n    <lastname>{{longText&Symbols}}</lastname>\r\n    <totalprice>{{totalPrice}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{longText&Symbols}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlDepositPaidTRUE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let depositPaid = 'true';\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{totalPrice}}</totalprice>\r\n    <depositpaid>true</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlDepositPaidFALSE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let depositPaid = 'false';\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{totalPrice}}</totalprice>\r\n    <depositpaid>false</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlTotalPrice0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = 0;\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>0</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlTotalPriceMax",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"maxTotalPrice\"));\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{maxTotalPrice}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlTotalPriceLargeDigit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"largeDigit\"));\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{largeDigit}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXMLTotalPriceFloatDigit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseFloat(pm.environment.get(\"floatDigit\"));\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{floatDigit}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlDateFormatMM/DD/YYYY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"// Covert date format from MM/DD/YYYY to YYYY-MM-DD for checkin and checkout fields.\r",
											"let rawCheckin = pm.environment.get(\"checkinDateMMDDYYYY\");\r",
											"let rawCheckinParts = rawCheckin.split(\"/\"); // Split the string into parts\r",
											"let formattedCheckin = `${rawCheckinParts[2]}-${rawCheckinParts[0]}-${rawCheckinParts[1]}`; // Reformat to YYYY-MM-DD\r",
											"\r",
											"let rawCheckout = pm.environment.get(\"checkoutDateMMDDYYYY\");\r",
											"let rawCheckoutParts = rawCheckout.split(\"/\"); // Split the string into parts\r",
											"let formattedCheckout = `${rawCheckoutParts[2]}-${rawCheckoutParts[0]}-${rawCheckoutParts[1]}`; // Reformat to YYYY-MM-DD\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = formattedCheckin;\r",
											"let checkout = formattedCheckout;\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{totalPrice}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkinDateMMDDYYYY}}</checkin>\r\n        <checkout>{{checkoutDateMMDDYYYY}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByXmlDateFormatYYYYMMDD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let xml2js = require('xml2js'); // Import xml2js library\r",
											"\r",
											"let xml2Json = (xml) => {\r",
											"    // Function to convert XML to JSON\r",
											"    const parser = new xml2js.Parser();\r",
											"    let jsonData;\r",
											"    parser.parseString(xml, function (err, result) {\r",
											"        if (err) throw err;\r",
											"        jsonData = result;\r",
											"    });\r",
											"    return jsonData;\r",
											"};\r",
											"\r",
											"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
											"\r",
											"var bookingid = jsonData['created-booking']['bookingid'][0];\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"// Test #1\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test #2\r",
											"// Covert checkin and checkout dates to MM/DD/YYYY format for comparison with request data.\r",
											"function convertDateFormat(dateString) {\r",
											"    return dateString.replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1-$2-$3');\r",
											"};\r",
											"\r",
											"const checkinFormattedDate = convertDateFormat(pm.environment.get(\"checkinDateYYYYMMDD\"));\r",
											"const checkoutFormattedDate = convertDateFormat(pm.environment.get(\"checkoutDateYYYYMMDD\"));\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let depositPaid = pm.environment.get(\"depositPaid\");\r",
											"let checkin = checkinFormattedDate;\r",
											"let checkout = checkoutFormattedDate;\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['firstname'][0]).to.be.eql(firstname);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['lastname'][0]).to.be.eql(lastname);\r",
											"    pm.expect(parseInt(jsonData['created-booking']['booking'][0]['totalprice'][0])).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['depositpaid'][0]).to.be.eql(depositPaid);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkin'][0]).to.be.eql(checkin);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['bookingdates'][0]['checkout'][0]).to.be.eql(checkout);\r",
											"    pm.expect(jsonData['created-booking']['booking'][0]['additionalneeds'][0]).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstName}}</firstname>\r\n    <lastname>{{lastName}}</lastname>\r\n    <totalprice>{{totalPrice}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>20250106</checkin>\r\n        <checkout>20250109</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalNeeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ByURLencoded",
					"item": [
						{
							"name": "CreateBookingByURLencoded",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalPrice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedNoNeeds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalPrice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedLongNames&Needs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"longText\");\r",
											"let lastname = pm.environment.get(\"longText\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"longText\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{longText}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{longText}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalPrice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{longText}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedDepositPaidTRUE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(true);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalPrice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "true",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedDepositPaidFALSE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(false);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalPrice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "false",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedTotalPrice0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = 0;\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "0",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedTotalPriceMax",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"maxTotalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{maxTotalPrice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedTotalPriceLargeDigit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"largeDigit\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{largeDigit}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedTotalPriceFloatDigit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseFloat(pm.environment.get(\"floatDigit\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "100.85",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedDateFormatMM/DD/YYYY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"// Covert date format from MM/DD/YYYY to YYYY-MM-DD for checkin and checkout fields.\r",
											"let rawCheckin = pm.environment.get(\"checkinDateMMDDYYYY\");\r",
											"let rawCheckinParts = rawCheckin.split(\"/\"); // Split the string into parts\r",
											"let formattedCheckin = `${rawCheckinParts[2]}-${rawCheckinParts[0]}-${rawCheckinParts[1]}`; // Reformat to YYYY-MM-DD\r",
											"\r",
											"let rawCheckout = pm.environment.get(\"checkoutDateMMDDYYYY\");\r",
											"let rawCheckoutParts = rawCheckout.split(\"/\"); // Split the string into parts\r",
											"let formattedCheckout = `${rawCheckoutParts[2]}-${rawCheckoutParts[0]}-${rawCheckoutParts[1]}`; // Reformat to YYYY-MM-DD\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = formattedCheckin;\r",
											"let checkout = formattedCheckout;\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalPrice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkinDateMMDDYYYY}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkoutDateMMDDYYYY}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						},
						{
							"name": "CreateBookingByURLencodedDateFormatYYYYMMDD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"// Covert checkin and checkout dates to MM/DD/YYYY format for comparison with request data.\r",
											"function convertDateFormat(dateString) {\r",
											"    return dateString.replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1-$2-$3');\r",
											"};\r",
											"\r",
											"const checkinFormattedDate = convertDateFormat(pm.environment.get(\"checkinDateYYYYMMDD\"));\r",
											"const checkoutFormattedDate = convertDateFormat(pm.environment.get(\"checkoutDateYYYYMMDD\"));\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = checkinFormattedDate;\r",
											"let checkout = checkoutFormattedDate;\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstName}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastName}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalPrice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositPaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkinDateYYYYMMDD}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkoutDateYYYYMMDD}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalNeeds}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  -d 'firstname=Jim&lastname=Brown&totalprice=111&depositpaid=true&bookingdates%5Bcheckin%5D=2018-01-01&bookingdates%5Bcheckout%5D=2018-01-02'"
							},
							"response": []
						}
					]
				},
				{
					"name": "ByJSON",
					"item": [
						{
							"name": "CreateBookingByJSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set('firstName', userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonNoAddtitionalNeeds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"{{firstName}}\",\r\n    \"lastname\": \"{{lastName}}\",\r\n    \"totalprice\": {{totalPrice}},\r\n    \"depositpaid\": {{depositPaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonLongNames&Needs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"longText\");\r",
											"let lastname = pm.environment.get(\"longText\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"longText\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{longText}}\",\r\n    \"lastname\" : \"{{longText}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{longText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonFirst&LastNameMin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"minText\");\r",
											"let lastname = pm.environment.get(\"minText\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"minText\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{minText}}\",\r\n    \"lastname\" : \"{{minText}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{minText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonDepositPaidTRUE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(true);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonDepositPaidFALSE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(false);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonTotalPrice0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(0);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : 0,\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonTotalPriceMax",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"maxTotalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{maxTotalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonTotalPriceLargeDigit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"largeDigit\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{largeDigit}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonTotalPriceFloatDigit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseFloat(pm.environment.get(\"floatDigit\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{floatDigit}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonDateFormatMM/DD/YYYY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"// Covert date format from MM/DD/YYYY to YYYY-MM-DD for checkin and checkout fields.\r",
											"let rawCheckin = pm.environment.get(\"checkinDateMMDDYYYY\");\r",
											"let rawCheckinParts = rawCheckin.split(\"/\"); // Split the string into parts\r",
											"let formattedCheckin = `${rawCheckinParts[2]}-${rawCheckinParts[0]}-${rawCheckinParts[1]}`; // Reformat to YYYY-MM-DD\r",
											"\r",
											"let rawCheckout = pm.environment.get(\"checkoutDateMMDDYYYY\");\r",
											"let rawCheckoutParts = rawCheckout.split(\"/\"); // Split the string into parts\r",
											"let formattedCheckout = `${rawCheckoutParts[2]}-${rawCheckoutParts[0]}-${rawCheckoutParts[1]}`; // Reformat to YYYY-MM-DD\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = formattedCheckin;\r",
											"let checkout = formattedCheckout;\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkinDateMMDDYYYY}}\",\r\n        \"checkout\" : \"{{checkoutDateMMDDYYYY}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonDateFormatYYYYMMDD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"// Covert checkin and checkout dates to MM/DD/YYYY format for comparison with request data.\r",
											"function convertDateFormat(dateString) {\r",
											"    return dateString.replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1-$2-$3');\r",
											"};\r",
											"\r",
											"const checkinFormattedDate = convertDateFormat(pm.environment.get(\"checkinDateYYYYMMDD\"));\r",
											"const checkoutFormattedDate = convertDateFormat(pm.environment.get(\"checkoutDateYYYYMMDD\"));\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = checkinFormattedDate;\r",
											"let checkout = checkoutFormattedDate;\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function () {\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkinDateYYYYMMDD}}\",\r\n        \"checkout\" : \"{{checkinDateYYYYMMDD}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonNegativePrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"let firstname = pm.environment.get(\"firstName\");\r",
											"let lastname = pm.environment.get(\"lastName\");\r",
											"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
											"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
											"let checkin = pm.environment.get(\"checkin\");\r",
											"let checkout = pm.environment.get(\"checkout\");\r",
											"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response data corresponds to request data\", function(){\r",
											"    pm.expect(jsonData.booking.firstname).to.be.eql(firstname);\r",
											"    pm.expect(jsonData.booking.lastname).to.be.eql(lastname);\r",
											"    pm.expect(jsonData.booking.totalprice).to.be.eql(totalprice);\r",
											"    pm.expect(jsonData.booking.depositpaid).to.be.eql(isTrue);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.eql(checkin);\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.eql(checkout);\r",
											"    pm.expect(jsonData.booking.additionalneeds).to.be.eql(additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : -{{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonEmptyStrings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : \"\",\r\n    \"depositpaid\" : \"\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"additionalneeds\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonTotalPriceNull",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWord}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var bookingid = pm.response.json().bookingid\r",
											"pm.environment.set(\"bookingId\", bookingid);\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"CreatedBooking\"));\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : \"null\",\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonNoFirst&LastNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonCheckinInPastCheckoutInFuture",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{$randomDateFuture}}\",\r\n        \"checkout\" : \"{{$randomDatePast}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBookingByJsonInvalidData",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
											"pm.environment.set(\"firstName\", userFirstName);\r",
											"\r",
											"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
											"pm.environment.set(\"lastName\", userLastName);\r",
											"\r",
											"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
											"\r",
											"var userDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
											"pm.environment.set(\"depositPaid\", userDepositPaid);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
											"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkin\", formattedPastDate);\r",
											"\r",
											"var currentDate = new Date();\r",
											"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
											"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
											"pm.environment.set(\"checkout\", formattedFutureDate);\r",
											"\r",
											"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
											"pm.environment.set(\"additionalNeeds\", userNeeds);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : 123,\r\n    \"lastname\" : 123,\r\n    \"totalprice\" : \"hello\",\r\n    \"depositpaid\" : \"thing\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : 123,\r\n        \"checkout\" : 123\r\n    },\r\n    \"additionalneeds\" : 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"let bookingId = pm.environment.get(\"bookingId\");\r",
							"let req = { \r",
							"    url: \"https://restful-booker.herokuapp.com/booking/\" + bookingId,\r",
							"    method: \"DELETE\",\r",
							"    header: {\r",
							"        \"Authorization\": pm.environment.get(\"basicAuth\")\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(req, function (err, response) {\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Get Bookings",
			"item": [
				{
					"name": "GetBookingById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response data is correct\", function () {\r",
									"    pm.expect(jsonData.firstname).to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).to.be.eql(additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingByIdWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\") === \"true\";\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response data is correct\", function () {\r",
									"    pm.expect(jsonData.firstname).to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).to.be.eql(additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://restful-booker.herokuapp.com/booking/{{bookingId}}",
							"protocol": "http",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingByNonExistentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/{{maxTotalPrice}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{maxTotalPrice}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingByInvData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/<!@$^&*><script>alert123</script>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"<!@$^&*><script>alert123<",
								"script>"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBookingIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByFirstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?firstname=John",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "John"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByLastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?lastname=Smith",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "lastname",
									"value": "Smith"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByFirstname&Lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?firstname=John&lastname=Smith",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "John"
								},
								{
									"key": "lastname",
									"value": "Smith"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByVariableNames",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?firstname={{firstName}}&lastname={{lastName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstName}}"
								},
								{
									"key": "lastname",
									"value": "{{lastName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByCheckinDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?checkin=2018-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2018-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByCheckoutDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?checkout=2019-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkout",
									"value": "2019-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByCheckin&CheckoutDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?checkin=2018-01-01&checkout=2019-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2018-01-01"
								},
								{
									"key": "checkout",
									"value": "2019-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByVariableDates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?checkin={{checkin}}&checkout={{checkout}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}"
								},
								{
									"key": "checkout",
									"value": "{{checkout}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByNames&Dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?firstname=John&lastname=Smith&checkin=2018-01-01&checkout=2019-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "John"
								},
								{
									"key": "lastname",
									"value": "Smith"
								},
								{
									"key": "checkin",
									"value": "2018-01-01"
								},
								{
									"key": "checkout",
									"value": "2019-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByVariableNames&Dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"BookingIds\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?firstname={{firstName}}&lastname={{lastName}}&checkin={{checkin}}&checkout={{checkout}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstName}}"
								},
								{
									"key": "lastname",
									"value": "{{lastName}}"
								},
								{
									"key": "checkin",
									"value": "{{checkin}}"
								},
								{
									"key": "checkout",
									"value": "{{checkout}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBookingIdsFilterByDoubleCheckinDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?checkin=2018-01-01&checkin=2018-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2018-01-01"
								},
								{
									"key": "checkin",
									"value": "2018-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByNames&Dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?firstname=John&lastname=Smith&checkin=2018-01-01&checkout=2019-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "John"
								},
								{
									"key": "lastname",
									"value": "Smith"
								},
								{
									"key": "checkin",
									"value": "2018-01-01"
								},
								{
									"key": "checkout",
									"value": "2019-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByAdditionalNeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?additionalneeds=something",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "additionalneeds",
									"value": "something"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingIdsFilterByNonExistentValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking?something=<1234%!@>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "something",
									"value": "<1234%!@>"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set('firstName', userFirstName);\r",
							"\r",
							"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
							"pm.environment.set(\"lastName\", userLastName);\r",
							"\r",
							"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
							"pm.environment.set(\"depositPaid\", depositPaid);\r",
							"\r",
							"var currentDate = new Date();\r",
							"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
							"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
							"pm.environment.set(\"checkin\", formattedPastDate);\r",
							"\r",
							"var currentDate = new Date();\r",
							"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
							"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
							"pm.environment.set(\"checkout\", formattedFutureDate);\r",
							"\r",
							"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
							"pm.environment.set(\"additionalNeeds\", userNeeds);\r",
							"\r",
							"// 1. Создаем пользователя\r",
							"let req = { \r",
							"    url: \"https://restful-booker.herokuapp.com/booking\", \r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\",\r",
							"        \"Accept\": \"application/json\" \r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\", \r",
							"        raw: { \r",
							"\r",
							"            \"firstname\": pm.environment.get(\"firstName\"),\r",
							"            \"lastname\": pm.environment.get(\"lastName\"),\r",
							"            \"totalprice\": pm.environment.get(\"totalPrice\"),\r",
							"            \"depositpaid\" : pm.environment.get(\"depositPaid\"),\r",
							"            \"bookingdates\" : {\r",
							"            \"checkin\" : pm.environment.get(\"checkin\"),\r",
							"            \"checkout\" : pm.environment.get(\"checkout\")\r",
							"            },\r",
							"            \"additionalneeds\" : pm.environment.get(\"additionalNeeds\")\r",
							"        },\r",
							"    },\r",
							"};\r",
							"\r",
							"pm.sendRequest(req, function (err, response) {\r",
							"    pm.environment.set(\"bookingId\", response.json().bookingid);\r",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"let bookingId = pm.environment.get(\"bookingId\");\r",
							"let req = { \r",
							"    url: \"https://restful-booker.herokuapp.com/booking/\" + bookingId,\r",
							"    method: \"DELETE\",\r",
							"    header: {\r",
							"        \"Authorization\": pm.environment.get(\"basicAuth\")\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(req, function (err, response) {\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Update Booking",
			"item": [
				{
					"name": "UpdateBookingTokenJSON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\");\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Data updated\", function(){\r",
									"    pm.expect(jsonData.firstname).not.to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).not.to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).not.to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).not.to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).not.to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).not.to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).not.to.be.eql(additionalneeds);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : {{$randomInt}},\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{$randomDatePast}}\",\r\n        \"checkout\" : \"{{$randomDateFuture}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{$randomWords}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookingAuthorizationJSON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\");\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Data updated\", function(){\r",
									"    pm.expect(jsonData.firstname).not.to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).not.to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).not.to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).not.to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).not.to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).not.to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).not.to.be.eql(additionalneeds);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{basicAuth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : {{$randomInt}},\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{$randomDatePast}}\",\r\n        \"checkout\" : \"{{$randomDateFuture}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{$randomWords}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						},
						"description": "Generated from cURL: curl -X PUT \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "UpdateBookingAuthorizationXML",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let xml2js = require('xml2js'); // Import xml2js library\r",
									"\r",
									"let xml2Json = (xml) => {\r",
									"    // Function to convert XML to JSON\r",
									"    const parser = new xml2js.Parser();\r",
									"    let jsonData;\r",
									"    parser.parseString(xml, function (err, result) {\r",
									"        if (err) throw err;\r",
									"        jsonData = result;\r",
									"    });\r",
									"    return jsonData;\r",
									"};\r",
									"\r",
									"let jsonData = xml2Json(pm.response.text()); // Assuming the response is in XML format\r",
									"\r",
									"// Test #1\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test #2\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let depositPaid = pm.environment.get(\"depositPaid\");\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"\r",
									"pm.test(\"Response data corresponds to request data\", function () {\r",
									"    pm.expect(jsonData['booking']['firstname'][0]).not.to.be.eql(firstname);\r",
									"    pm.expect(jsonData['booking']['lastname'][0]).not.to.be.eql(lastname);\r",
									"    pm.expect(parseInt(jsonData['booking']['totalprice'][0])).not.to.be.eql(totalprice);\r",
									"    pm.expect(jsonData['booking']['depositpaid'][0]).not.to.be.eql(depositPaid);\r",
									"    pm.expect(jsonData['booking']['bookingdates'][0]['checkin'][0]).not.to.be.eql(checkin);\r",
									"    pm.expect(jsonData['booking']['bookingdates'][0]['checkout'][0]).not.to.be.eql(checkout);\r",
									"    pm.expect(jsonData['booking']['additionalneeds'][0]).not.to.be.eql(additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{basicAuth}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <firstname>{{$randomFirstName}}</firstname>\r\n    <lastname>{{$randomLastName}}</lastname>\r\n    <totalprice>{{$randomInt}}</totalprice>\r\n    <depositpaid>false</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{$randomDatePast}}</checkin>\r\n        <checkout>{{$randomDateFuture}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{$randomWords}}</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookingTokenURLencoded",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\");\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Data updated\", function(){\r",
									"    pm.expect(jsonData.firstname).not.to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).not.to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).not.to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).not.to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).not.to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).not.to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).not.to.be.eql(additionalneeds);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "totalprice",
									"value": "{{$randomInt}}",
									"type": "text"
								},
								{
									"key": "depositpaid",
									"value": "false",
									"type": "text"
								},
								{
									"key": "bookingdates[checkin]",
									"value": "{{$randomDatePast}}",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "{{$randomDateFuture}}",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "{{$randomWords}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookingWithTokenInCookieEmptyStrings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : \"\",\r\n    \"depositpaid\" : \"\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"additionalneeds\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookingInvalidToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token=token",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookingInvalidAuthorization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGF",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						},
						"description": "Generated from cURL: curl -X PUT \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "UpdateBookingTokenJsonNoAdditionalNeeds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\");\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Data updated\", function(){\r",
									"    pm.expect(jsonData.firstname).not.to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).not.to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).not.to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).not.to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).not.to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).not.to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).to.be.eql(additionalneeds);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : {{$randomInt}},\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{$randomDatePast}}\",\r\n        \"checkout\" : \"{{$randomDateFuture}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookingTokenJsonNoFirstName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookingTokenJsonNoDates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{firstName}}\",\r\n    \"lastname\" : \"{{lastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositPaid}},\r\n    \"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set('firstName', userFirstName);\r",
							"\r",
							"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
							"pm.environment.set(\"lastName\", userLastName);\r",
							"\r",
							"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
							"\r",
							"pm.environment.set(\"depositPaid\", true);\r",
							"\r",
							"var currentDate = new Date();\r",
							"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
							"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
							"pm.environment.set(\"checkin\", formattedPastDate);\r",
							"\r",
							"var currentDate = new Date();\r",
							"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
							"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
							"pm.environment.set(\"checkout\", formattedFutureDate);\r",
							"\r",
							"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
							"pm.environment.set(\"additionalNeeds\", userNeeds);\r",
							"\r",
							"// 1. Создаем пользователя\r",
							"let req = { \r",
							"    url: \"https://restful-booker.herokuapp.com/booking\", \r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\",\r",
							"        \"Accept\": \"application/json\" \r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\", \r",
							"        raw: { \r",
							"\r",
							"            \"firstname\": pm.environment.get(\"firstName\"),\r",
							"            \"lastname\": pm.environment.get(\"lastName\"),\r",
							"            \"totalprice\": pm.environment.get(\"totalPrice\"),\r",
							"            \"depositpaid\" : pm.environment.get(\"depositPaid\"),\r",
							"            \"bookingdates\" : {\r",
							"            \"checkin\" : pm.environment.get(\"checkin\"),\r",
							"            \"checkout\" : pm.environment.get(\"checkout\")\r",
							"            },\r",
							"            \"additionalneeds\" : pm.environment.get(\"additionalNeeds\")\r",
							"        },\r",
							"    },\r",
							"};\r",
							"\r",
							"pm.sendRequest(req, function (err, response) {\r",
							"    pm.environment.set(\"bookingId\", response.json().bookingid);\r",
							"});\r",
							"\r",
							"// 2. Создаем токен\r",
							"let getToken = {\r",
							"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: {\r",
							"            \"username\": pm.environment.get(\"username\"),\r",
							"            \"password\": pm.environment.get(\"password\")\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(getToken, function (err, response) {\r",
							"    pm.environment.set(\"token\", response.json().token)\r",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"let bookingId = pm.environment.get(\"bookingId\");\r",
							"let req = { \r",
							"    url: \"https://restful-booker.herokuapp.com/booking/\" + bookingId,\r",
							"    method: \"DELETE\",\r",
							"    header: {\r",
							"        \"Authorization\": pm.environment.get(\"basicAuth\")\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(req, function (err, response) {\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Update Booking Partially",
			"item": [
				{
					"name": "UpdateBookingPartiallyNames",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
									"pm.environment.set('firstName', userFirstName);\r",
									"\r",
									"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
									"pm.environment.set(\"lastName\", userLastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\");\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Data updated\", function(){\r",
									"    pm.expect(jsonData.firstname).not.to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).not.to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).to.be.eql(additionalneeds);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						},
						"description": "Generated from cURL: curl -X PATCH \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "UpdateBookingPartiallyTotalPrice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"maxTotalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\");\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Data updated\", function(){\r",
									"    pm.expect(jsonData.firstname).to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).to.be.eql(additionalneeds);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalprice\" : {{maxTotalPrice}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						},
						"description": "Generated from cURL: curl -X PATCH \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "UpdateBookingPartiallyDates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Data updated\", function(){\r",
									"    pm.expect(jsonData.firstname).to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.eql(\"1998-01-01\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.eql(\"1999-02-02\");\r",
									"    pm.expect(jsonData.additionalneeds).to.be.eql(additionalneeds);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"1998-01-01\",\r\n        \"checkout\" : \"1999-02-02\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						},
						"description": "Generated from cURL: curl -X PATCH \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "UpdateBookingPartiallyAdditionalNeeds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ExistingBooking\"));\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let firstname = pm.environment.get(\"firstName\");\r",
									"let lastname = pm.environment.get(\"lastName\");\r",
									"let totalprice = parseInt(pm.environment.get(\"totalPrice\"));\r",
									"let isTrue = pm.environment.get(\"depositPaid\");\r",
									"let checkin = pm.environment.get(\"checkin\");\r",
									"let checkout = pm.environment.get(\"checkout\");\r",
									"let additionalneeds = pm.environment.get(\"additionalNeeds\");\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Data updated\", function(){\r",
									"    pm.expect(jsonData.firstname).to.be.eql(firstname);\r",
									"    pm.expect(jsonData.lastname).to.be.eql(lastname);\r",
									"    pm.expect(jsonData.totalprice).to.be.eql(totalprice);\r",
									"    pm.expect(jsonData.depositpaid).to.be.eql(isTrue);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.eql(checkin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.eql(checkout);\r",
									"    pm.expect(jsonData.additionalneeds).not.to.be.eql(additionalneeds);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"additionalneeds\" : \"{{$randomWords}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						},
						"description": "Generated from cURL: curl -X PATCH \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}'"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set('firstName', userFirstName);\r",
							"\r",
							"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
							"pm.environment.set(\"lastName\", userLastName);\r",
							"\r",
							"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
							"\r",
							"pm.environment.set(\"depositPaid\", true);\r",
							"\r",
							"var currentDate = new Date();\r",
							"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
							"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
							"pm.environment.set(\"checkin\", formattedPastDate);\r",
							"\r",
							"var currentDate = new Date();\r",
							"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
							"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
							"pm.environment.set(\"checkout\", formattedFutureDate);\r",
							"\r",
							"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
							"pm.environment.set(\"additionalNeeds\", userNeeds);\r",
							"\r",
							"// 1. Создаем пользователя\r",
							"let req = { \r",
							"    url: \"https://restful-booker.herokuapp.com/booking\", \r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\",\r",
							"        \"Accept\": \"application/json\" \r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\", \r",
							"        raw: { \r",
							"\r",
							"            \"firstname\": pm.environment.get(\"firstName\"),\r",
							"            \"lastname\": pm.environment.get(\"lastName\"),\r",
							"            \"totalprice\": pm.environment.get(\"totalPrice\"),\r",
							"            \"depositpaid\" : pm.environment.get(\"depositPaid\"),\r",
							"            \"bookingdates\" : {\r",
							"            \"checkin\" : pm.environment.get(\"checkin\"),\r",
							"            \"checkout\" : pm.environment.get(\"checkout\")\r",
							"            },\r",
							"            \"additionalneeds\" : pm.environment.get(\"additionalNeeds\")\r",
							"        },\r",
							"    },\r",
							"};\r",
							"\r",
							"pm.sendRequest(req, function (err, response) {\r",
							"    pm.environment.set(\"bookingId\", response.json().bookingid);\r",
							"});\r",
							"\r",
							"// 2. Создаем токен\r",
							"let getToken = {\r",
							"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: {\r",
							"            \"username\": pm.environment.get(\"username\"),\r",
							"            \"password\": pm.environment.get(\"password\")\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(getToken, function (err, response) {\r",
							"    pm.environment.set(\"token\", response.json().token)\r",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"let bookingId = pm.environment.get(\"bookingId\");\r",
							"let req = { \r",
							"    url: \"https://restful-booker.herokuapp.com/booking/\" + bookingId,\r",
							"    method: \"DELETE\",\r",
							"    header: {\r",
							"        \"Authorization\": pm.environment.get(\"basicAuth\")\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(req, function (err, response) {\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "DeleteBooking",
			"item": [
				{
					"name": "DeleteBookingUsingToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
									"pm.environment.set('firstName', userFirstName);\r",
									"\r",
									"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
									"pm.environment.set(\"lastName\", userLastName);\r",
									"\r",
									"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
									"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
									"\r",
									"pm.environment.set(\"depositPaid\", true);\r",
									"\r",
									"var currentDate = new Date();\r",
									"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
									"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
									"pm.environment.set(\"checkin\", formattedPastDate);\r",
									"\r",
									"var currentDate = new Date();\r",
									"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
									"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
									"pm.environment.set(\"checkout\", formattedFutureDate);\r",
									"\r",
									"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
									"pm.environment.set(\"additionalNeeds\", userNeeds);\r",
									"\r",
									"// 1. Создаем пользователя\r",
									"let req = { \r",
									"    url: \"https://restful-booker.herokuapp.com/booking\", \r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",\r",
									"        \"Accept\": \"application/json\" \r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        raw: { \r",
									"\r",
									"            \"firstname\": pm.environment.get(\"firstName\"),\r",
									"            \"lastname\": pm.environment.get(\"lastName\"),\r",
									"            \"totalprice\": pm.environment.get(\"totalPrice\"),\r",
									"            \"depositpaid\" : pm.environment.get(\"depositPaid\"),\r",
									"            \"bookingdates\" : {\r",
									"            \"checkin\" : pm.environment.get(\"checkin\"),\r",
									"            \"checkout\" : pm.environment.get(\"checkout\")\r",
									"            },\r",
									"            \"additionalneeds\" : pm.environment.get(\"additionalNeeds\")\r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {\r",
									"    pm.environment.set(\"bookingId\", response.json().bookingid);\r",
									"});\r",
									"\r",
									"// 2. Создаем токен\r",
									"let getToken = {\r",
									"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: {\r",
									"            \"username\": pm.environment.get(\"username\"),\r",
									"            \"password\": pm.environment.get(\"password\")\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(getToken, function (err, response) {\r",
									"    pm.environment.set(\"token\", response.json().token)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteNonExistentBookingUsingToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/{{maxTotalPrice}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{maxTotalPrice}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBookingUsingBasicAuth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var userFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
									"pm.environment.set('firstName', userFirstName);\r",
									"\r",
									"var userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
									"pm.environment.set(\"lastName\", userLastName);\r",
									"\r",
									"var userTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
									"pm.environment.set(\"totalPrice\", userTotalPrice);\r",
									"\r",
									"pm.environment.set(\"depositPaid\", true);\r",
									"\r",
									"var currentDate = new Date();\r",
									"var pastDate = new Date(currentDate.getTime() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000); \r",
									"var formattedPastDate = pastDate.toISOString().split('T')[0];\r",
									"pm.environment.set(\"checkin\", formattedPastDate);\r",
									"\r",
									"var currentDate = new Date();\r",
									"var futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 10) + 1);\r",
									"var formattedFutureDate = futureDate.toISOString().split('T')[0];\r",
									"pm.environment.set(\"checkout\", formattedFutureDate);\r",
									"\r",
									"var userNeeds = pm.variables.replaceIn(\"{{$randomWords}}\");\r",
									"pm.environment.set(\"additionalNeeds\", userNeeds);\r",
									"\r",
									"// 1. Создаем пользователя\r",
									"let req = { \r",
									"    url: \"https://restful-booker.herokuapp.com/booking\", \r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",\r",
									"        \"Accept\": \"application/json\" \r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        raw: { \r",
									"\r",
									"            \"firstname\": pm.environment.get(\"firstName\"),\r",
									"            \"lastname\": pm.environment.get(\"lastName\"),\r",
									"            \"totalprice\": pm.environment.get(\"totalPrice\"),\r",
									"            \"depositpaid\" : pm.environment.get(\"depositPaid\"),\r",
									"            \"bookingdates\" : {\r",
									"            \"checkin\" : pm.environment.get(\"checkin\"),\r",
									"            \"checkout\" : pm.environment.get(\"checkout\")\r",
									"            },\r",
									"            \"additionalneeds\" : pm.environment.get(\"additionalNeeds\")\r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {\r",
									"    pm.environment.set(\"bookingId\", response.json().bookingid);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{basicAuth}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						},
						"description": "Generated from cURL: curl -X DELETE \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Authorization: Basic YWRtaW46cGFzc3dvcmQxMjM='"
					},
					"response": []
				},
				{
					"name": "DeleteNonExistentBookingUsingBasicAuth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{basicAuth}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/{{maxTotalPrice}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{maxTotalPrice}}"
							]
						},
						"description": "Generated from cURL: curl -X DELETE \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Authorization: Basic YWRtaW46cGFzc3dvcmQxMjM='"
					},
					"response": []
				}
			]
		},
		{
			"name": "Healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/ping",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}
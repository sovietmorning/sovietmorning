{
	"info": {
		"_postman_id": "c632dd42-caf8-44eb-ad21-73a5d1c16def",
		"name": "Stepik REST API Course",
		"description": "Коллекция разработана для тестирования [restapi.tech](https://restapi.tech/) в процессе прохождения курса [\"Тестирование REST API в Postman - лёгкий старт в автоматизацию\"](https://stepik.org/course/131052) на платформе Stepik\n\n! Для корректной работы коллекции подключить окружение \"Stepik REST API Course Env\"\n\n---\n\nThis collection was developed for testing [restapi.tech](https://restapi.tech/) during the Stepik course [\"REST API Testing with Postman: A Beginner's Guide to Automation\"](https://stepik.org/course/131052)\n\n! Required: Configure \"Stepik REST API Course Env\"",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39553756",
		"_collection_link": "https://test-public-apis.postman.co/workspace/LEARNING~dcbfabfb-ad2c-4409-bb69-fa175c0cfc4c/collection/39553756-c632dd42-caf8-44eb-ad21-73a5d1c16def?action=share&source=collection_link&creator=39553756"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Set Schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let CompanyList = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"company_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_address\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_status\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [\"ACTIVE\", \"CLOSED\", \"BANKRUPT\"]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"company_id\",\r",
									"                    \"company_name\",\r",
									"                    \"company_address\",\r",
									"                    \"company_status\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        },\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"total\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"total\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"meta\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let Company = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"company_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company_address\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company_status\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\r",
									"                \"ACTIVE\",\r",
									"                \"BANKRUPT\",\r",
									"                \"CLOSED\"\r",
									"            ]\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description_lang\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"translation_lang\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [\r",
									"                            \"EN\",\r",
									"                            \"RU\",\r",
									"                            \"PL\",\r",
									"                            \"UA\"\r",
									"                        ]\r",
									"                    },\r",
									"                    \"translation\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"oneOf\": [\r",
									"        {\r",
									"            \"required\": [\"description\"]\r",
									"        },\r",
									"        {\r",
									"            \"required\": [\"description_lang\"]\r",
									"        }\r",
									"    ],\r",
									"    \"required\": [\r",
									"        \"company_id\",\r",
									"        \"company_name\",\r",
									"        \"company_address\",\r",
									"        \"company_status\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let UsersList = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"total\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"total\"\r",
									"            ]\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\": {\r",
									"                        \"type\": [\"string\", \"null\"]\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_id\": {\r",
									"                        \"type\": [\"integer\", \"null\"]\r",
									"                    },\r",
									"                    \"user_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"meta\",\r",
									"        \"data\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"\r",
									"let ResponseUser = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"first_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"last_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"user_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"last_name\",\r",
									"        \"user_id\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let HTTPValidationError = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"loc\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": [\r",
									"                                \"string\",\r",
									"                                \"integer\"\r",
									"                            ]\r",
									"                        }\r",
									"                    },\r",
									"                    \"msg\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"loc\",\r",
									"                    \"msg\",\r",
									"                    \"type\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let MeResponse = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"email_address\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"email\"\r",
									"        },\r",
									"        \"valid_till\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"token\",\r",
									"        \"user_name\",\r",
									"        \"email_address\",\r",
									"        \"valid_till\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let ErrorDetail = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"reason\": { \"type\": \"string\" }\r",
									"            },\r",
									"            \"required\": [\"reason\"]\r",
									"        },\r",
									"    },\r",
									"    \"required\": [\"detail\"]\r",
									"};\r",
									"\r",
									"let MethodNotAllowed = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }, \"required\": [\"detail\"]\r",
									"};\r",
									"\r",
									"\r",
									"pm.environment.set(\"CompanyList\", JSON.stringify(CompanyList));\r",
									"pm.environment.set(\"Company\", JSON.stringify(Company));\r",
									"pm.environment.set(\"UsersList\", JSON.stringify(UsersList));\r",
									"pm.environment.set(\"ResponseUser\", JSON.stringify(ResponseUser));\r",
									"pm.environment.set(\"HTTPValidationError\", JSON.stringify(HTTPValidationError));\r",
									"pm.environment.set(\"MeResponse\", JSON.stringify(MeResponse));\r",
									"pm.environment.set(\"ErrorDetail\", JSON.stringify(ErrorDetail));\r",
									"pm.environment.set(\"MethodNotAllowed\", JSON.stringify(MethodNotAllowed));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "companies",
			"item": [
				{
					"name": "CompaniesDefaultRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with default limit\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(3);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"\r",
									"pm.test(\"Headers are vaild\", function () {\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.eql('https://restapi.tech/api/companies');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://restapi.tech/api/companies",
							"protocol": "http",
							"host": [
								"restapi",
								"tech"
							],
							"path": [
								"api",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithLimitAndOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with limit 5\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(5);\r",
									"});\r",
									"\r",
									"let offset = pm.variables.get(\"offset\");\r",
									"pm.test(\"Verify offset\", function () {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(offset)\r",
									"})\r",
									"\r",
									"pm.test(\"Verify query-params\", function () {\r",
									"    let limit = parseInt(pm.request.url.query.idx(0).value);\r",
									"    let offset = parseInt(pm.request.url.query.idx(1).value);\r",
									"    let metaLimit = pm.response.json().meta.limit;\r",
									"    let metaOffset = pm.response.json().meta.offset;\r",
									"\r",
									"    pm.expect(limit).to.eql(metaLimit);\r",
									"    pm.expect(offset).to.eql(metaOffset);\r",
									"})\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://restapi.tech/api/companies\", function (err, response) {\r",
									"    pm.variables.set(\"offset\", response.json().data[2].company_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=5&offset=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithStatusACTIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Company status matches query parameter\", function() {\r",
									"    let queryStatus = pm.request.url.query.get(\"status\");\r",
									"    for(let companyStatus of pm.response.json().data){\r",
									"        pm.expect(companyStatus.company_status).to.eql(queryStatus);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Companies statuses are ACTIVE\", function() {\r",
									"    for(let companyStatus of pm.response.json().data){\r",
									"        pm.expect(companyStatus.company_status).to.eql(\"ACTIVE\");\r",
									"    }\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithStatusCLOSED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Company status matches query parameter\", function() {\r",
									"    let queryStatus = pm.request.url.query.get(\"status\");\r",
									"    for(let companyStatus of pm.response.json().data){\r",
									"        pm.expect(companyStatus.company_status).to.eql(queryStatus);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Company statuses are CLOSED\", function() {\r",
									"    for(let companyStatus of pm.response.json().data){\r",
									"        pm.expect(companyStatus.company_status).to.eql(\"CLOSED\");\r",
									"    }\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=CLOSED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "CLOSED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithStatusBANKRUPT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Company status matches query parameter\", function() {\r",
									"    let queryStatus = pm.request.url.query.get(\"status\");\r",
									"    for(let companyStatus of pm.response.json().data){\r",
									"        pm.expect(companyStatus.company_status).to.eql(queryStatus);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Company statuses are BANKRUPT\", function() {\r",
									"    for(let companyStatus of pm.response.json().data){\r",
									"        pm.expect(companyStatus.company_status).to.eql(\"BANKRUPT\");\r",
									"    }\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=BANKRUPT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "BANKRUPT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithInvQueryStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithStrQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithInvQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(3);\r",
									"});\r",
									"\r",
									"let offset = pm.variables.get(\"offset\");\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(offset)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify query-param offset\", function () {\r",
									"    let offset = parseInt(pm.request.url.query.idx(0).value);\r",
									"    let metaOffset = pm.response.json().meta.offset;\r",
									"\r",
									"    pm.expect(offset).to.eql(metaOffset);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://restapi.tech/api/companies\", function (err, response) {\r",
									"    pm.variables.set(\"offset\", response.json().data[0].company_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?offset=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithStrQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?offset=test",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "offset",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompanyById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response with correct Accept-language\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if (pm.response.json().description_lang) {\r",
									"    pm.test(\"description_lang === EN\", function () {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")\r",
									"    }\r",
									"    )\r",
									"};\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "CompanyByNonexId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "CompanyByIdLangRU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response with correct Accept-language\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if (pm.response.json().description_lang) {\r",
									"    pm.test(\"description_lang === EN\", function () {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")\r",
									"    }\r",
									"    )\r",
									"};\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "RU",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "CompanyByIdInvLang",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if (pm.response.json().description_lang) {\r",
									"    pm.test(\"description_lang === EN\", function () {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")\r",
									"    }\r",
									"    )\r",
									"};\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "UsersWithLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with limit 10\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(10);\r",
									"});\r",
									"\r",
									"let offset = pm.variables.get(\"offset\");\r",
									"pm.test(\"Verify offset\", function () {\r",
									"    pm.expect(DataJson[0].user_id).to.eql(offset)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify query-params\", function () {\r",
									"    let limit = parseInt(pm.request.url.query.idx(0).value);\r",
									"    let offset = parseInt(pm.request.url.query.idx(1).value);\r",
									"    let metaLimit = pm.response.json().meta.limit;\r",
									"    let metaOffset = pm.response.json().meta.offset;\r",
									"\r",
									"    pm.expect(limit).to.eql(metaLimit);\r",
									"    pm.expect(offset).to.eql(metaOffset);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"UsersList\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://restapi.tech/api/users?limit=10\", function (err, response) {\r",
									"    pm.variables.set(\"offset\", response.json().data[5].user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?limit=10&offset=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UsersWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?limit=-10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "-10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UsersWithStrLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?limit=abc&offset=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "abc"
								},
								{
									"key": "offset",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UsersWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"\r",
									"pm.test(\"Headers are vaild\", function() {\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.eql('https://restapi.tech/api/users');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://restapi.tech/api/users",
							"protocol": "http",
							"host": [
								"restapi",
								"tech"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCreate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"user_id\", pm.response.json().user_id);\r",
									"pm.collectionVariables.set(\"first_name\", pm.response.json().first_name);\r",
									"pm.collectionVariables.set(\"last_name\", pm.response.json().last_name);\r",
									"pm.collectionVariables.set(\"company_id\", pm.response.json().company_id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"company_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCreateWithNonExistentCompanyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail.reason).to.include('Company with requested id: 150 is absent');\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"{{$randomFirstName}}\",\r\n    \"last_name\": \"{{$randomLastName}}\",\r\n    \"company_id\": 150\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCreateWithNullLastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Amalia\",\r\n  \"last_name\": null,\r\n  \"company_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCreateWithСlosedCompany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Response body is valid\", function () {    \r",
									"    pm.expect(jsonData.detail.reason).to.include('You can only register with companies with ACTIVE status');\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Наташа\",\r\n  \"last_name\": \"Тверь\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCreateWithoutLastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Наташа\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Verify enums\", function(){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetNonExistentUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail.reason).to.include('User with requested id: 15000000 is absent');\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/15000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"15000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Маруся\")\r",
									"pm.collectionVariables.set(\"last_name\", \"Петрова\")\r",
									"pm.collectionVariables.set(\"company_id\", \"2\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Verify enums\", function(){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserUpdateWithNonExistentCompany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail.reason).to.include('Company with requested id: 200 is absent');\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Таня\")\r",
									"pm.collectionVariables.set(\"last_name\", \"Любимова\")\r",
									"pm.collectionVariables.set(\"company_id\", \"2\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NonExistentUserUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail.reason).to.include('User with requested id: 15000000 is absent');\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/15000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"15000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is object\", function(){\r",
									"    pm.expect(pm.response.json()).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteNonExistentUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail.reason).to.include('User with requested id: 15000000 is absent');\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/15000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"15000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "issues",
			"item": [
				{
					"name": "IssuesCompaniesWithQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with limit 1\", function() {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(1);\r",
									"});\r",
									"\r",
									"let offset = pm.variables.get(\"offset\");\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(offset)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify query-params\", function () {\r",
									"    let limit = parseInt(pm.request.url.query.idx(0).value);\r",
									"    let offset = parseInt(pm.request.url.query.idx(1).value);\r",
									"    let status = pm.request.url.query.idx(2).value;\r",
									"    let metaLimit = pm.response.json().meta.limit;\r",
									"    let metaOffset = pm.response.json().meta.offset;\r",
									"    let companyStatus = pm.response.json().data[0].company_status;\r",
									"\r",
									"    pm.expect(limit).to.eql(metaLimit);\r",
									"    pm.expect(offset).to.eql(metaOffset);\r",
									"    pm.expect(status).to.eql(companyStatus);\r",
									"});\r",
									"\r",
									"pm.test(\"Company status matches query parameter\", function() {\r",
									"    let queryStatus = pm.request.url.query.get(\"status\");\r",
									"    for(let companyStatus of pm.response.json().data){\r",
									"        pm.expect(companyStatus.company_status).to.eql(queryStatus);\r",
									"    }\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://restapi.tech/api/companies\", function (err, response) {\r",
									"    pm.variables.set(\"offset\", response.json().data[1].company_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies?limit=1&offset=1&status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IssuesCompanyByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response with correct Accept-language\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if (pm.response.json().description_lang) {\r",
									"    pm.test(\"description_lang === EN\", function () {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")\r",
									"    });\r",
									"};\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "IssuesGetUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.variables.get(\"first_name\");\r",
									"let last_name = pm.variables.get(\"last_name\");\r",
									"let company_id = pm.variables.get(\"company_id\");\r",
									"let user_id = pm.variables.get(\"user_id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();  \r",
									"pm.test(\"Verify enums\", function (){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);    \r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const req = { \r",
									"    url: pm.variables.replaceIn(\"https://restapi.tech/api/users/{{user_id}}\"),\r",
									"    method: \"DELETE\",\r",
									"}\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let req = { // объявили переменную req\r",
									"    url: \"https://restapi.tech/api/users\", // на этот URL отправляем запрос\r",
									"    method: \"POST\", // Определяем метод\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\", // Определяем \"Content-Type\" нашего request body\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\", // определяем формат request body\r",
									"        raw: { // в ключ raw передаем JSON, для регистрации юзера\r",
									"            \"first_name\": \"Марина\",\r",
									"            \"last_name\": \"Климова\",\r",
									"            \"company_id\": 3, \r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {\r",
									"    // сетаем в локальную переменную user_id\r",
									"    pm.variables.set(\"user_id\", response.json().user_id);\r",
									"    pm.variables.set(\"first_name\", response.json().first_name);\r",
									"    pm.variables.set(\"last_name\", response.json().last_name);\r",
									"    pm.variables.set(\"company_id\", response.json().company_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "IssuesUserCreated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Синее\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Небо\");\r",
									"pm.collectionVariables.set(\"company_id\", \"3\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Verify enums\", function(){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "create token (authentication)",
					"item": [
						{
							"name": "Login3SymbolsValidPW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"token\", pm.response.json().token);\r",
											"\r",
											"pm.test(\"Token received\", function() {\r",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"Tanya\",\r\n  \"password\": \"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login7SymbolsValidPW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Token received\", function() {\r",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"Privet1\",\r\n  \"password\": \"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login1SymbolValidPW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"P\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login2SymbolsValidPW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"ra\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login0SymbolsValidPW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "NoLoginValidPW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidLoginNoPW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidLoginWrongPW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response body is valid\", function () {    \r",
											"    pm.expect(jsonData.detail.reason).to.include('Invalid login or password');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"hel\",\r\n  \"password\": \"qwerty1234\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidLoginPW0Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response body is valid\", function () {    \r",
											"    pm.expect(jsonData.detail.reason).to.include('Invalid login or password');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"hel\",\r\n  \"password\": \"\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get info about user",
					"item": [
						{
							"name": "ValidTokenAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"MeResponse\"));\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidTokenAuth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let token = pm.environment.get(\"token\");\r",
											"let tokenNew = token.slice(0, -10) + \"qwe1rty3BB\";\r",
											"\r",
											"pm.variables.set(\"token\", tokenNew);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response body is valid\", function () {    \r",
											"    pm.expect(jsonData.detail.reason).to.include('Token is incorrect. Please login and try again');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExpiredTokenAuth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const req = { // объявили переменную req\r",
											"    url: \"https://restapi.tech/api/auth/authorize\", // на этот URL отправляем запрос\r",
											"    method: \"POST\", // Определяем метод\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\", // Определяем \"Content-Type\" нашего request body\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\", // определяем формат request body\r",
											"        raw: { // в ключ raw передаем JSON, который мы отправляли в С-01\r",
											"            \"login\": \"Abc\",\r",
											"            \"password\": \"qwerty12345\",\r",
											"            \"timeout\": 3, // не забываем изменить время жизни токена на более короткий период\r",
											"        },\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(req, function (err, response) { // передаем переменную req первым аргументом\r",
											"    pm.variables.set(\"token\", response.json().token) // сохраняем в лок. переменную актуальный токен\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, 5000); // ставим ожидание в 5 секунд, что-бы токен успел истечь"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response body is valid\", function () {    \r",
											"    pm.expect(jsonData.detail.reason).to.include('Token is expired. Please login and try again');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "NoTokenAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
											"pm.test(\"Schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response body is valid\", function () {    \r",
											"    pm.expect(jsonData.detail.reason).to.include('Please use auth method for getting data for private method');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "x-token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "extra",
			"item": [
				{
					"name": "CompanyByNonExistentIdLangEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ErrorDetail\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "EN",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/15000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"15000"
							]
						}
					},
					"response": []
				},
				{
					"name": "CompanyByInvIdLangPL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "PL",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/company",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateCompany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body match the expected text\", function() {\r",
									"    pm.expect(pm.response.text()).to.include('Method Not Allowed');\r",
									"\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"MethodNotAllowed\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"company_id\": 9,\r\n    \"company_name\": \"Best course factory\",\r\n    \"company_address\": \"Some address\",\r\n    \"company_status\": \"ACTIVE\",\r\n    \"description\": \"Some description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/companies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateCompany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body match the expected text\", function() {\r",
									"    pm.expect(pm.response.text()).to.include('Method Not Allowed');\r",
									"\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"MethodNotAllowed\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " \r\n \t\r\n{\r\n  \"company_id\": 1,\r\n  \"company_name\": \"Best course factory\",\r\n  \"company_address\": \"Some address\",\r\n  \"company_status\": \"ACTIVE\",\r\n  \"description\": \"Some description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCompany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body match the expected text\", function() {\r",
									"    pm.expect(pm.response.text()).to.include('Method Not Allowed');\r",
									"\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"MethodNotAllowed\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "CompaniesWithInvStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserByString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/natasha",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"natasha"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserUpdateOnlyLastName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"last_name\", \"Devotchka\")\r",
									"pm.collectionVariables.set(\"user_id\", \"344\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"))\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"last_name\": \"{{last_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserUpdateInvData",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"user_id\", \"344\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": 1,\r\n  \"last_name\": 2,\r\n  \"company_id\": \"check\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserWithUnexpectedFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"address\": \"Tambov\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UsersWithZeroLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"\r",
									"pm.test(\"Len of JSON with limit 0\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify query-params\", function () {\r",
									"    let limit = parseInt(pm.request.url.query.idx(0).value);\r",
									"    let metaLimit = pm.response.json().meta.limit;\r",
									"\r",
									"    pm.expect(limit).to.eql(metaLimit);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"UsersList\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?limit=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UserUpdateWithoutRequiredFieldLastName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"user_id\", \"344\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Fill\",\r\n    \"company_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "IssuesUserUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body match the expected text\", function() {\r",
									"    pm.expect(pm.response.text()).to.include('Method Not Allowed');\r",
									"\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"MethodNotAllowed\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Pifagor\",\r\n    \"last_name\": \"Samosskiy\",\r\n    \"company_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users/151",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users",
								"151"
							]
						}
					},
					"response": []
				},
				{
					"name": "IssuesDeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body match the expected text\", function() {\r",
									"    pm.expect(pm.response.text()).to.include('Method Not Allowed');\r",
									"\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"MethodNotAllowed\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Pifagor\",\r\n    \"last_name\": \"Samosskiy\",\r\n    \"company_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users/15000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users",
								"15000"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 500ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"});\r",
					"\r",
					"if (pm.request.url.protocol === \"https\" & pm.request.method != \"HEAD\") {\r",
					"    pm.test(\"Headers are valid\", () => {\r",
					"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
					"        pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
					"    });\r",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "last_name",
			"value": ""
		}
	]
}